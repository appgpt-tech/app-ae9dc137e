//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { ScriptsEntity } from './db/Scripts.entity';
import { BooksEntity } from './db/Books.entity';
import { UsersEntity } from './db/Users.entity';
import { PaymentsEntity } from './db/Payments.entity';
import { GenresEntity } from './db/Genres.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      ScriptsEntity,
      BooksEntity,
      UsersEntity,
      PaymentsEntity,
      GenresEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Scripts: [
        {
          title: 'title 1',
          genre: 'genre 1',
          length: 1,
          scriptText: 'scriptText 1',
          id: 12,
        },
        {
          title: 'title 2',
          genre: 'genre 2',
          length: 2,
          scriptText: 'scriptText 2',
          id: 20,
        },
        {
          title: 'title 3',
          genre: 'genre 3',
          length: 3,
          scriptText: 'scriptText 3',
          id: 19,
        },
        {
          title: 'title 4',
          genre: 'genre 4',
          length: 4,
          scriptText: 'scriptText 4',
          id: 7,
        },
        {
          title: 'title 5',
          genre: 'genre 5',
          length: 5,
          scriptText: 'scriptText 5',
          id: 25,
        },
      ],
      Books: [
        {
          title: 'title 1',
          genre: 'genre 1',
          coverImage: 'coverImage 1',
          id: 94,
        },
        {
          title: 'title 2',
          genre: 'genre 2',
          coverImage: 'coverImage 2',
          id: 4,
        },
        {
          title: 'title 3',
          genre: 'genre 3',
          coverImage: 'coverImage 3',
          id: 51,
        },
        {
          title: 'title 4',
          genre: 'genre 4',
          coverImage: 'coverImage 4',
          id: 8,
        },
        {
          title: 'title 5',
          genre: 'genre 5',
          coverImage: 'coverImage 5',
          id: 94,
        },
      ],
      Users: [
        {
          username: 'username 1',
          emailAddress: 'emailAddress 1',
          password: 'password 1',
          id: 68,
        },
        {
          username: 'username 2',
          emailAddress: 'emailAddress 2',
          password: 'password 2',
          id: 60,
        },
        {
          username: 'username 3',
          emailAddress: 'emailAddress 3',
          password: 'password 3',
          id: 6,
        },
        {
          username: 'username 4',
          emailAddress: 'emailAddress 4',
          password: 'password 4',
          id: 68,
        },
        {
          username: 'username 5',
          emailAddress: 'emailAddress 5',
          password: 'password 5',
          id: 21,
        },
      ],
      Payments: [
        {
          amount: 0.07,
          paymentMethod: 'paymentMethod 1',
          subscriptionType: 'subscriptionType 1',
          paymentStatus: 'paymentStatus 1',
          id: 23,
        },
        {
          amount: 0.6,
          paymentMethod: 'paymentMethod 2',
          subscriptionType: 'subscriptionType 2',
          paymentStatus: 'paymentStatus 2',
          id: 42,
        },
        {
          amount: 0.33,
          paymentMethod: 'paymentMethod 3',
          subscriptionType: 'subscriptionType 3',
          paymentStatus: 'paymentStatus 3',
          id: 68,
        },
        {
          amount: 0.22,
          paymentMethod: 'paymentMethod 4',
          subscriptionType: 'subscriptionType 4',
          paymentStatus: 'paymentStatus 4',
          id: 6,
        },
        {
          amount: 0.15,
          paymentMethod: 'paymentMethod 5',
          subscriptionType: 'subscriptionType 5',
          paymentStatus: 'paymentStatus 5',
          id: 3,
        },
      ],
      Genres: [
        { genreName: 'genreName 1', id: 48 },
        { genreName: 'genreName 2', id: 40 },
        { genreName: 'genreName 3', id: 44 },
        { genreName: 'genreName 4', id: 43 },
        { genreName: 'genreName 5', id: 2 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('ScriptsEntity', data.Scripts);
      await this.SeedResource('BooksEntity', data.Books);
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('PaymentsEntity', data.Payments);
      await this.SeedResource('GenresEntity', data.Genres);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
